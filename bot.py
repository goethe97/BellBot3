"""
Discord HR Bot
==============
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ Discord (–∞–Ω–∫–µ—Ç—ã, –≤–æ–ø—Ä–æ—Å—ã/–æ—Ç–≤–µ—Ç—ã);
- –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ;
- –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤;
- –ª–æ–≥–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –≤ –õ–° —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ä–µ–∞–∫—Ü–∏—è–º–∏
"""

import discord
from discord.ext import commands
from dotenv import load_dotenv
import sys
import os
import asyncio


# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –º–æ–¥—É–ª–µ–π (cogs)
from cogs.deadlines import check_deadlines
from cogs.applications import (
    questions,
    load_progress,
    save_progress,
    finish_form,
    ask_question,
    process_application_message,
    user_progress,
)

from cogs.helpers import (
    fetch_app_message,
    extract_lines,
    get_next_index,
    load_blacklist_from_channel,
)
from configuration import (
    GUILD_ID,
    TARGET_CHANNEL_ID,
    REVIEW_ROLES,
    CONFIG_PATH,
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
progress_lock = asyncio.Lock()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (exe –∏–ª–∏ py)
if getattr(sys, "frozen", False):  # –µ—Å–ª–∏ exe
    BASE_DIR = os.path.dirname(sys.executable)
else:  # –µ—Å–ª–∏ py
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ intents –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–µ–∞–∫—Ü–∏—è–º–∏ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.reactions = True

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = commands.Bot(command_prefix="!", intents=intents)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
if not os.path.exists(CONFIG_PATH):
    raise FileNotFoundError(
        f"‚ùå –§–∞–π–ª {CONFIG_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π config.json —Ä—è–¥–æ–º —Å exe"
    )


# -------------------- –°–æ–±—ã—Ç–∏—è --------------------
@bot.event
async def on_ready():
    """
    –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
    - –ó–∞–≥—Ä—É–∂–∞–µ—Ç blacklist
    - –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∫–µ—Ç
    - –ù–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç–∞—Ö
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–¥–ª–∞–π–Ω—ã
    """
    global user_progress  # ‚¨ÖÔ∏è –≤–æ—Ç —Ç—É—Ç "—Å—ä–µ—Ö–∞–ª" –æ—Ç—Å—Ç—É–ø (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–∞–±, –∞ –Ω–µ 4 –ø—Ä–æ–±–µ–ª–∞)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await load_blacklist_from_channel(bot)

    # –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    user_progress = await load_progress()

    # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç
    for uid, entry in list(user_progress.items()):
        index = entry.get("index", 0)
        if index < len(questions):  # –∞–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            try:
                user = await bot.fetch_user(uid)
                print(f"‚è© –£ {user} –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ (–≤–æ–ø—Ä–æ—Å {index + 1})")

                dm = user.dm_channel or await user.create_dm()
                await dm.send(
                    f"üìå –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞. "
                    f"–í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –Ω–∞ –≤–æ–ø—Ä–æ—Å–µ {index + 1}. "
                    f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ-–∞–Ω–∫–µ—Ç—ã —Ä–µ–∞–∫—Ü–∏–µ–π."
                )

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã {uid}: {e}")
                user_progress.pop(uid, None)

    await save_progress()
    print(f"‚úÖ Logged in as {bot.user}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª —Å –∞–Ω–∫–µ—Ç–∞–º–∏ (–∏—â–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ä–µ–∞–∫—Ü–∏–π)
    guild = bot.get_guild(GUILD_ID)
    if guild is None:
        return
    channel = bot.get_channel(TARGET_CHANNEL_ID)
    if channel is None:
        return

    async for message in channel.history(limit=10):
        if message.reactions:
            continue
        full_text = message.content or ""
        if message.embeds:
            embed = message.embeds[0]
            if embed.description:
                full_text += "\n" + embed.description
            for field in embed.fields:
                full_text += f"\n{field.name}\n{field.value}"

        if "–í–∞—à DISCORD" in full_text:
            await process_application_message(bot, message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥–ª–∞–π–Ω—ã
    try:
        await check_deadlines(bot, GUILD_ID, REVIEW_ROLES)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤: {e}")


@bot.event
async def on_message(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    –õ–æ–≥–∏–∫–∞:
      1. –°–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –∑–∞—è–≤–æ–∫ ‚Üí –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∫–µ—Ç—ã.
      2. –°–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–∫–µ (DM) ‚Üí –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –∞–Ω–∫–µ—Ç–µ.
    """
    global user_progress

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–≤–æ–∏ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.author == bot.user:
        return

    # ==============================
    # === –°–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –∑–∞—è–≤–æ–∫
    # ==============================
    if message.channel.id == TARGET_CHANNEL_ID:
        lines = extract_lines(message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–Ω–∫–µ—Ç—ã
        if any("–≤–∞—à discord" in line.lower() for line in lines):
            await process_application_message(bot, message)
        return

    # ==============================
    # === –°–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–∫–µ (DM)
    # ==============================
    if isinstance(message.channel, discord.DMChannel):
        uid = message.author.id

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç –≤ –ø–∞–º—è—Ç–∏)
        if uid not in user_progress:
            loaded = await load_progress()
            user_progress.update(loaded)

            # –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if uid not in user_progress:
                return

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ —Ñ–∞–π–ª–∞ (–∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è)
        user_progress = await load_progress()
        entry = user_progress[uid]

        answers = entry.get("answers", [])
        index = entry.get("index", 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—à–µ–ª –ª–∏ –∏–Ω–¥–µ–∫—Å –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        if index >= len(questions):
            return

        q = questions[index]

        # ==============================
        # === –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        # ==============================
        if not q.get("options"):  # –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
            answers.append(message.content)

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            new_index = await get_next_index(index, answers)

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è: –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –¥–≤–∏–≥–∞–µ–º –≤—Ä—É—á–Ω—É—é
            if new_index <= index:
                new_index = index + 1

            entry["index"] = new_index
            entry["answers"] = answers

            # --- –ï—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã ‚Üí –∑–∞–¥–∞—ë–º —Å–ª–µ–¥—É—é—â–∏–π
            if new_index < len(questions):
                try:
                    new_qmsg = await ask_question(bot, message.author, new_index)
                except Exception:
                    return

                entry["qmsg_id"] = new_qmsg.id if new_qmsg else None
                user_progress[uid] = entry
                await save_progress()

            # --- –í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚Üí –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∫–µ—Ç—É
            else:
                msg_obj = await fetch_app_message(bot, entry.get("msg_id"))
                await finish_form(bot, uid, answers, msg_obj)
                await save_progress()

        # ==============================
        # === –í–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        # ==============================
        else:
            # –ù–∞ —Ç–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ–∂–∏–¥–∞—é—Ç—Å—è —Ä–µ–∞–∫—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É –≤ DM –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            return


@bot.event
async def on_raw_reaction_add(payload):
    """
    –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏.
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
    - –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    """
    user_progress = await load_progress()
    if payload.user_id == bot.user.id:
        return

    uid = payload.user_id
    emoji = str(payload.emoji)

    entry = user_progress.get(uid)
    if not entry:
        print(f"[DEBUG] –£ {uid} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞–Ω–∫–µ—Ç—ã")

    index = entry.get("index", 0)
    qmsg_id = entry.get("qmsg_id")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∞–∫—Ü–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    if payload.message_id != qmsg_id:
        print(
            f"[DEBUG] –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏—é ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ({payload.message_id} != {qmsg_id})"
        )
        return

    q = questions[index]
    options = q.get("options")
    if not options or emoji not in options:
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    entry["answers"].append(options[emoji])
    entry["index"] = await get_next_index(index, entry["answers"])
    user_progress[uid] = entry
    await save_progress()

    user = await bot.fetch_user(uid)

    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
    if entry["index"] < len(questions):
        new_qmsg = await ask_question(bot, user, entry["index"])
        if new_qmsg:
            entry["qmsg_id"] = new_qmsg.id
            user_progress[uid] = entry
            await save_progress()
    else:
        msg_obj = await fetch_app_message(entry.get("msg_id"))
        await finish_form(bot, uid, entry["answers"], msg_obj)


# -------------------- –ó–∞–ø—É—Å–∫ --------------------
async def run_bot():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
    –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
    """

    while True:
        try:
            await bot.start(TOKEN)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            print("‚è≥ –ñ–¥—É 30 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞...")
            await asyncio.sleep(30)


asyncio.run(run_bot())
